- name: get home directory of Ansible runner
  shell: "echo $HOME"
  register: ansible_runner_home

- name: Install required packages
  apt:
    update_cache: true
    pkg:
      - python-is-python3
      - python3-venv
      - python3-pip

- name: Init Python venv
  shell: python -m venv {{ node_user_home }}/env
  args:
    creates: '{{ node_user_home }}/env/bin/activate'
  become_user: '{{ node_user }}'

- name: Install toml
  pip:
    virtualenv: '{{ node_user_home }}/env'
    virtualenv_python: python3
    state: latest
    name:
      - toml_cli
  become_user: '{{ node_user }}'

- name: Configure config.toml
  shell: |
    {{ node_user_home }}/env/bin/toml set --toml-path {{ chain_home }}/config/config.toml {{ config_toml[count].key }} {{ config_toml[count].value }} {{ config_toml[count].toml_cli_args }}
  become_user: '{{ node_user }}'
  when: config_toml is defined
  loop: "{{ config_toml }}"
  loop_control:
    index_var: count

- name: Configure app.toml
  shell: |
    {{ node_user_home }}/env/bin/toml set --toml-path {{ chain_home }}/config/app.toml {{ app_toml[count].key }} {{ app_toml[count].value }} {{ app_toml[count].toml_cli_args }}
  become_user: '{{ node_user }}'
  when: app_toml is defined
  loop: "{{ app_toml }}"
  loop_control:
    index_var: count

- name: Configure client.toml
  shell: |
    {{ node_user_home }}/env/bin/toml set --toml-path {{ chain_home }}/config/client.toml {{ client_toml[count].key }} {{ client_toml[count].value }} {{ client_toml[count].toml_cli_args }}
  become_user: '{{ node_user }}'
  when: client_toml is defined
  loop: "{{ client_toml }}"
  loop_control:
    index_var: count

- name: Setting gov params
  shell: |
    cd {{chain_home}}/config
    jq '.app_state.gov.deposit_params.min_deposit[0].denom = "adym"' "$GENESIS_FILE" > "$tmp" && mv "$tmp" "$GENESIS_FILE"
    jq '.app_state.gov.deposit_params.min_deposit[0].amount = "10000000000"' "$GENESIS_FILE" > "$tmp" && mv "$tmp" "$GENESIS_FILE"
    jq '.app_state.gov.voting_params.voting_period = "1m"' "$GENESIS_FILE" > "$tmp" && mv "$tmp" "$GENESIS_FILE"
  environment:
    GENESIS_FILE: '{{chain_home}}/config/genesis.json'
    tmp: temp.json

- name: setting hub params
  shell: |
    sed -i'' -e 's/bond_denom": ".*"/bond_denom": "adym"/' "$GENESIS_FILE"
    sed -i'' -e 's/mint_denom": ".*"/mint_denom": "adym"/' "$GENESIS_FILE"

    jq '.app_state.rollapp.params.dispute_period_in_blocks = "2"' "$GENESIS_FILE" > "$tmp" && mv "$tmp" "$GENESIS_FILE"

    #increase the tx size cost per byte from 10 to 100
    jq '.app_state.auth.params.tx_size_cost_per_byte = "100"' "$GENESIS_FILE" > "$tmp" && mv "$tmp" "$GENESIS_FILE"


    # jail validators faster, and shorten recovery time, no slash for downtime
    jq '.app_state.slashing.params.signed_blocks_window = "10000"' "$GENESIS_FILE" > "$tmp" && mv "$tmp" "$GENESIS_FILE"
    jq '.app_state.slashing.params.min_signed_per_window = "0.800000000000000000"' "$GENESIS_FILE" > "$tmp" && mv "$tmp" "$GENESIS_FILE"
    jq '.app_state.slashing.params.downtime_jail_duration = "120s"' "$GENESIS_FILE" > "$tmp" && mv "$tmp" "$GENESIS_FILE"
    jq '.app_state.slashing.params.slash_fraction_downtime = "0.0"' "$GENESIS_FILE" > "$tmp" && mv "$tmp" "$GENESIS_FILE"
  environment:
    GENESIS_FILE: '{{chain_home}}/config/genesis.json'
    tmp: temp.json

- name: setting consensus params
  shell: |
    jq '.consensus_params["block"]["max_bytes"] = "4194304"' "$GENESIS_FILE" > "$tmp" && mv "$tmp" "$GENESIS_FILE"
    jq '.consensus_params["block"]["max_gas"] = "10000000"' "$GENESIS_FILE" > "$tmp" && mv "$tmp" "$GENESIS_FILE"
  environment:
    GENESIS_FILE: '{{chain_home}}/config/genesis.json'
    tmp: temp.json

- name: Setting EVM params
  shell : |
    jq '.app_state["feemarket"]["params"]["no_base_fee"] = true' "$GENESIS_FILE" > "$tmp" && mv "$tmp" "$GENESIS_FILE"
    jq '.app_state.evm.params.evm_denom = "adym"' "$GENESIS_FILE" > "$tmp" && mv "$tmp" "$GENESIS_FILE"
    jq '.app_state.evm.params.enable_create = false' "$GENESIS_FILE" > "$tmp" && mv "$tmp" "$GENESIS_FILE"
  environment:
    GENESIS_FILE: '{{chain_home}}/config/genesis.json'
    tmp: temp.json

- name: Setting epoch params
  shell: |
    jq '.app_state.epochs.epochs += [{
    "identifier": "minute",
    "start_time": "0001-01-01T00:00:00Z",
    "duration": "60s",
    "current_epoch": "0",
    "current_epoch_start_time": "0001-01-01T00:00:00Z",
    "epoch_counting_started": false,
    "current_epoch_start_height": "0"
    }]' "$GENESIS_FILE" > "$tmp" && mv "$tmp" "$GENESIS_FILE"
  environment:
    GENESIS_FILE: '{{chain_home}}/config/genesis.json'
    tmp: temp.json

- name: Setting incentives params
  shell: |
    jq '.app_state.incentives.params.distr_epoch_identifier = "minute"' "$GENESIS_FILE" > "$tmp" && mv "$tmp" "$GENESIS_FILE"
    jq '.app_state.incentives.lockable_durations = ["60s"]' "$GENESIS_FILE" > "$tmp" && mv "$tmp" "$GENESIS_FILE"
  environment:
    GENESIS_FILE: '{{chain_home}}/config/genesis.json'
    tmp: temp.json

- name: Setting misc params
  shell: |
    jq '.app_state.crisis.constant_fee.denom = "adym"' "$GENESIS_FILE" > "$tmp" && mv "$tmp" "$GENESIS_FILE"
    jq -r '.app_state.gamm.params.pool_creation_fee[0].denom = "adym"' "$GENESIS_FILE" > "$tmp" && mv "$tmp" "$GENESIS_FILE"
    jq '.app_state["txfees"]["basedenom"] = "adym"' "$GENESIS_FILE" > "$tmp" && mv "$tmp" "$GENESIS_FILE"
    jq '.app_state["txfees"]["params"]["epoch_identifier"] = "minute"' "$GENESIS_FILE" > "$tmp" && mv "$tmp" "$GENESIS_FILE"
    
    jq -r '.app_state.gamm.params.enable_global_pool_fees = true' "$GENESIS_FILE" > "$tmp" && mv "$tmp" "$GENESIS_FILE"
  environment:
    GENESIS_FILE: '{{chain_home}}/config/genesis.json'
    tmp: temp.json

- name: Setting bank denom params
  shell: |
    jq '.app_state.bank.denom_metadata = [
        {
            "base": "adym",
            "denom_units": [
                {
                    "aliases": [],
                    "denom": "adym",
                    "exponent": 0
                },
                {
                    "aliases": [],
                    "denom": "DYM",
                    "exponent": 18
                }
            ],
            "description": "Denom metadata for DYM (adym)",
            "display": "DYM",
            "name": "DYM",
            "symbol": "DYM"
        }
    ]' "$GENESIS_FILE" > "$tmp" && mv "$tmp" "$GENESIS_FILE"
  environment:
    GENESIS_FILE: '{{chain_home}}/config/genesis.json'
    tmp: temp.json

- name: Change genesis file permission
  file:
    path: '{{chain_home}}/config/genesis.json'
    owner: "{{node_user}}"
    group: "{{node_user}}"

# Create node
- name: Create node
  when: not genesis.stat.exists
  shell: |
    cd $HOME
    {{chain_bin}} keys add {{key_name}} --keyring-backend {{node_keyring}} --home {{chain_home}}
    {{chain_bin}} add-genesis-account "$({{chain_bin}} keys show {{key_name}} -a --keyring-backend {{node_keyring}})" {{token_amount}} --home {{chain_home}}
  become_user: "{{node_user}}"

- name: gentx node
  when: not genesis.stat.exists
  shell: |
    cd $HOME
    {{chain_bin}} gentx {{key_name}} {{staking_amount}} --chain-id {{chain_id}} --keyring-backend {{node_keyring}} --home {{chain_home}}
  become_user: "{{node_user}}"

- name: collect gentx
  when: not genesis.stat.exists
  shell: |
    cd $HOME
    PATH=$PATH:/usr/local/go/bin:$HOME/go/bin
    {{chain_bin}} collect-gentxs --home {{ chain_home }}
  become_user: "{{ node_user }}"


  
  

